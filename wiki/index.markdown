Codger简介
=======
Codger是一种面向对象语言支译式语言，在运行时不需要预编译，支接执行即可。你可以使用codger进行交互式编程，在交互式中，它会立即返回你所需要的结果。也可以把codger解析器嵌入到你所开发的软件中，做为一个脚本引擎来动态扩展软件的功能。

标识符
=========
和大多数动态语言一样，Codger是一种弱类型语言，在使用标识符时，不需要预先申明其类型，并且可以把多个不同类型的对象赋值给同一个标识符，对象的类型是在运行时确定。当把一个标识符所引用的对象，赋值给另一个标识符时，这两个标识符所引用的对象为同一个。

基本数据类型
===========
Codger支持7种基本数据类型，这其中包括有：布尔值，整数，长整数，浮点数，字符串，数组，散列表以及一个特殊的类型Nil，用于表示空对象，Nil类似于Java中的NULL或者是python中的None对象。在7种数据类型中，布尔值，整数，长整数，浮点数，字符串属于标量类型，一旦标量类型的的对象被创建，在其生命周期类，其值是不会被改变。第二种为容器类型，数组是一种顺序性容器，散列表则为关联性容器。数组与散列表对象在其生命周期类，其状态可能会发生多次改变，他们属于可变类型。

函数与匿名函数
========
codger中可以使用func关键字来定义函数，函数在定义时，可以给参数赋值一个缺省值，当函数被调用时，如果参数的值没有被指定时，就会从缺省值中查找。codger也支持变参的定义,用于在函数定义时，参数的个数不能被确定下来的情况。  
匿名函数的定义与函数的定义类似，只不过少了一个函数名。匿名函数与函数都是在运行时才创建，并且被视为对象，可以把它们赋值给任意一个标识符。当函数被创建时，函数所在的作用域会被函数引用，当作用域退出时，被不会立即被销毁，只有当所有引用该作用域的函数被销毁时，该作用域才会被释放。

类
=======



