
v3.2 设计目标
[内存管理]
	@完善垃圾回收算法

[基本数据类型]
	@长整数，浮点数
	@散列表，集合

[高级特性]
	@信号，与槽
	@异常支持
[类权限]
	@增加类成员访问权限
	

v3.1 changelog
[内存管理]
	@废除引用计数，采用分代式节点复制算法回收系统的垃圾对象
	@建c库malloc／free上建立自已的内存管理构件，以加速内存的分配(经测试比c库能快上3~4左右)
[重写基本数据类型]
	@整数，字符串，布尔值
	@数组
	@nil
[高级特性]
	@匿名函数
[基本语句]
	@支持类的定义
[重写语法树转换为字节码]
	@现在语法树接口更加灵活
[重写虚拟机]
	@在设计时考虑了多线程
[重新设计api]
	@统一api风格 "类名_方法",
		例如 GrArray_SetItem,GrArray_GcNewFlag, GrHash_LookUp
	@统一api的返回值
		如果返回值为指针，NULL表示失败，其它表示成功
		如果返回值为整型,负数表示失败，其它表示成功

v3.0 changelog
[虚拟机]
	@把codger文件翻译成字节码
	@让字节码运行于虚拟机
[基本语句]
	@支持函数的定义


v2.0 changelog 
[语法树]
	@分析codger源文件的语法结构，并为之构造相应的语法树
	@基于语法树运行简单的语句
[基本语句]
	@for 语句
	@while 语句
	@if-elif-else语句
	@算术式
	@赋值语句


